import { useState, useRef } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { 
  Mic, 
  MicOff, 
  Volume2, 
  MessageCircle, 
  BarChart3, 
  TrendingUp, 
  Calendar,
  Send,
  Bot,
  User,
  Headphones,
  Languages
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
  language: string;
}

const VoiceAssistant = () => {
  const [isListening, setIsListening] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState("english");
  const [currentQuery, setCurrentQuery] = useState("");
  const [response, setResponse] = useState("");
  const [chatInput, setChatInput] = useState("");
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§ñ‡§∞‡•ç‡§ö, ‡§∞‡§∏‡•Ä‡§¶‡•ã‡§Ç ‡§î‡§∞ ‡§¨‡§ú‡§ü ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
      role: 'assistant',
      timestamp: new Date(),
      language: 'hindi'
    }
  ]);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();
  const { toast } = useToast();

  const languages = [
    { value: "english", label: "English", flag: "üá∫üá∏" },
    { value: "hindi", label: "‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)", flag: "üáÆüá≥" },
    { value: "marathi", label: "‡§Æ‡§∞‡§æ‡§†‡•Ä (Marathi)", flag: "üáÆüá≥" },
    { value: "tamil", label: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)", flag: "üáÆüá≥" }
  ];

  const suggestions = {
    english: [
      "Tell me my grocery spending last week.",
      "Do I have any return deadlines this week?",
      "Show me my impulse purchases this month.",
      "What's my average monthly grocery bill?"
    ],
    hindi: [
      "‡§™‡§ø‡§õ‡§≤‡•á ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡§ø‡§§‡§®‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡•Ä?",
      "‡§á‡§∏ ‡§π‡§´‡•ç‡§§‡•á ‡§ï‡•ã‡§à ‡§µ‡§æ‡§™‡§∏‡•Ä ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§π‡•à?",
      "‡§Æ‡•á‡§∞‡•Ä impulse ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§ì‡•§",
      "‡§Æ‡•á‡§∞‡§æ ‡§î‡§∏‡§§ ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ø‡§≤ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"
    ],
    marathi: [
      "‡§ó‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§ø‡§§‡•Ä ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡•á‡§≤‡§æ?",
      "‡§Ø‡§æ ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§§ ‡§™‡§∞‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§§‡§æ‡§∞‡§ñ‡§æ ‡§Ü‡§π‡•á‡§§ ‡§ï‡§æ?",
      "‡§Æ‡§æ‡§ù‡•Ä impulse ‡§ñ‡§∞‡•á‡§¶‡•Ä ‡§¶‡§æ‡§ñ‡§µ‡§æ‡•§",
      "‡§Æ‡§æ‡§ù‡•á ‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ø‡§≤ ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á?"
    ],
    tamil: [
      "‡Æï‡Æü‡Æ®‡Øç‡Æ§ ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡Æé‡Æµ‡Øç‡Æµ‡Æ≥‡Æµ‡ØÅ ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Øá‡Æ©‡Øç?",
      "‡Æá‡Æ®‡Øç‡Æ§ ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™ ‡Æï‡Øä‡Æü‡ØÅ‡Æï‡Øç‡Æï ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡Æø‡ÆØ ‡Æ§‡Øá‡Æ§‡Æø‡Æï‡Æ≥‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡Ææ?",
      "‡Æé‡Æ©‡Øç impulse ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡Æ≤‡Øç‡Æï‡Æ≥‡Øà ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡•§",
      "‡Æé‡Æ©‡Øç ‡Æö‡Æ∞‡Ææ‡Æö‡Æ∞‡Æø ‡ÆÆ‡Ææ‡Æ§ ‡Æ™‡Æø‡Æ≤‡Øç ‡Æé‡Æ©‡Øç‡Æ©?"
    ]
  };

  const mockResponses = {
    english: {
      spending: "You spent ‚Çπ5,612 on groceries last week. That's 15% more than your usual weekly average of ‚Çπ4,880.",
      returns: "Yes, you have 2 items with return deadlines: Premium headphones (return by Jan 25) and Winter jacket (return by Jan 30).",
      impulse: "This month you made 8 impulse purchases totaling ‚Çπ2,340. Most common categories: Chocolates (‚Çπ820) and Energy drinks (‚Çπ680).",
      average: "Your average monthly grocery bill is ‚Çπ18,500. You're tracking 12% below last year's average!"
    },
    hindi: {
      spending: "‡§Ü‡§™‡§®‡•á ‡§™‡§ø‡§õ‡§≤‡•á ‡§Æ‡§π‡•Ä‡§®‡•á ‚Çπ18,200 ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§ø‡§è‡•§ ‡§Ø‡§π ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§î‡§∏‡§§ ‡§∏‡•á 8% ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•à‡•§",
      returns: "‡§π‡§æ‡§Å, ‡§Ü‡§™‡§ï‡•á ‡§™‡§æ‡§∏ 2 ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§π‡•à‡§Ç ‡§ú‡§ø‡§®‡•ç‡§π‡•á‡§Ç ‡§µ‡§æ‡§™‡§∏ ‡§ï‡§∞‡§®‡§æ ‡§π‡•à: ‡§π‡•á‡§°‡§´‡•ã‡§® (25 ‡§ú‡§®‡§µ‡§∞‡•Ä ‡§§‡§ï) ‡§î‡§∞ ‡§ú‡•à‡§ï‡•á‡§ü (30 ‡§ú‡§®‡§µ‡§∞‡•Ä ‡§§‡§ï)‡•§",
      impulse: "‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§Ü‡§™‡§®‡•á 8 impulse ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡•Ä ‡§π‡•à ‡§ï‡•Å‡§≤ ‚Çπ2,340 ‡§ï‡•Ä‡•§ ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ: ‡§ö‡•â‡§ï‡§≤‡•á‡§ü ‡§î‡§∞ ‡§è‡§®‡§∞‡•ç‡§ú‡•Ä ‡§°‡•ç‡§∞‡§ø‡§Ç‡§ï‡•§",
      average: "‡§Ü‡§™‡§ï‡§æ ‡§î‡§∏‡§§ ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ø‡§≤ ‚Çπ18,500 ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§™‡§ø‡§õ‡§≤‡•á ‡§∏‡§æ‡§≤ ‡§∏‡•á 12% ‡§ï‡§Æ ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç!"
    },
    marathi: {
      spending: "‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ó‡•á‡§≤‡•ç‡§Ø‡§æ ‡§Ü‡§†‡§µ‡§°‡•ç‡§Ø‡§æ‡§§ ‚Çπ5,612 ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡•á‡§≤‡§æ‡§§‡•§ ‡§π‡•á ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§æ‡§™‡•ç‡§§‡§æ‡§π‡§ø‡§ï ‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä‡§™‡•á‡§ï‡•ç‡§∑‡§æ 15% ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§Ü‡§π‡•á‡•§",
      returns: "‡§π‡•ã‡§Ø, ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§ï‡§°‡•á 2 ‡§µ‡§∏‡•ç‡§§‡•Ç ‡§™‡§∞‡§§ ‡§ï‡§∞‡§æ‡§Ø‡§ö‡•ç‡§Ø‡§æ ‡§Ü‡§π‡•á‡§§: ‡§π‡•á‡§°‡§´‡•ã‡§® (25 ‡§ú‡§æ‡§®‡•á‡§µ‡§æ‡§∞‡•Ä ‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§) ‡§Ü‡§£‡§ø ‡§ú‡§æ‡§ï‡•Ä‡§ü (30 ‡§ú‡§æ‡§®‡•á‡§µ‡§æ‡§∞‡•Ä ‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§)‡•§",
      impulse: "‡§Ø‡§æ ‡§Æ‡§π‡§ø‡§®‡•ç‡§Ø‡§æ‡§§ ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä 8 impulse ‡§ñ‡§∞‡•á‡§¶‡•Ä ‡§ï‡•á‡§≤‡•Ä ‡§Ü‡§π‡•á ‡§è‡§ï‡•Ç‡§£ ‚Çπ2,340 ‡§ö‡•Ä‡•§ ‡§∏‡§∞‡•ç‡§µ‡§æ‡§§ ‡§ú‡§æ‡§∏‡•ç‡§§: ‡§ö‡•â‡§ï‡§≤‡•á‡§ü ‡§Ü‡§£‡§ø ‡§è‡§®‡§∞‡•ç‡§ú‡•Ä ‡§°‡•ç‡§∞‡§ø‡§Ç‡§ï‡•§",
      average: "‡§§‡•Å‡§Æ‡§ö‡•á ‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ø‡§≤ ‚Çπ18,500 ‡§Ü‡§π‡•á‡•§ ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ó‡•á‡§≤‡•ç‡§Ø‡§æ ‡§µ‡§∞‡•ç‡§∑‡§æ‡§™‡•á‡§ï‡•ç‡§∑‡§æ 12% ‡§ï‡§Æ‡•Ä ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§∞‡§§ ‡§Ü‡§π‡§æ‡§§!"
    },
    tamil: {
      spending: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æü‡Æ®‡Øç‡Æ§ ‡Æµ‡Ææ‡Æ∞‡ÆÆ‡Øç ‚Çπ5,612 ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡Æá‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æ¥‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æ© ‡Æµ‡Ææ‡Æ∞ ‡Æö‡Æ∞‡Ææ‡Æö‡Æ∞‡Æø‡ÆØ‡Øà ‡Æµ‡Æø‡Æü 15% ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç.",
      returns: "‡ÆÜ‡ÆÆ‡Øç, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æü‡ÆÆ‡Øç ‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™ ‡Æï‡Øä‡Æü‡ØÅ‡Æï‡Øç‡Æï ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡Æø‡ÆØ 2 ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æü‡Øç‡Æï‡Æ≥‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ©: ‡Æπ‡ØÜ‡Æü‡Øç‡ÆÉ‡Æ™‡Øã‡Æ©‡Øç (‡Æú‡Æ© 25 ‡Æµ‡Æ∞‡Øà) ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æú‡Ææ‡Æï‡Øç‡Æï‡ØÜ‡Æü‡Øç (‡Æú‡Æ© 30 ‡Æµ‡Æ∞‡Øà).",
      impulse: "‡Æá‡Æ®‡Øç‡Æ§ ‡ÆÆ‡Ææ‡Æ§‡ÆÆ‡Øç ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç 8 impulse ‡Æµ‡Ææ‡Æô‡Øç‡Æï‡Æ≤‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‚Çπ2,340. ‡ÆÖ‡Æ§‡Æø‡Æï‡ÆÆ‡Øç: ‡Æö‡Ææ‡Æï‡Øç‡Æ≤‡Øá‡Æü‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ©‡Æ∞‡Øç‡Æú‡Æø ‡Æü‡Øç‡Æ∞‡Æø‡Æô‡Øç‡Æï‡Øç‡Æ∏‡Øç.",
      average: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Æ∞‡Ææ‡Æö‡Æ∞‡Æø ‡ÆÆ‡Ææ‡Æ§ ‡Æ™‡Æø‡Æ≤‡Øç ‚Çπ18,500. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æü‡Æ®‡Øç‡Æ§ ‡ÆÜ‡Æ£‡Øç‡Æü‡Øà ‡Æµ‡Æø‡Æü 12% ‡Æï‡ØÅ‡Æ±‡Øà‡Æµ‡Ææ‡Æï ‡Æö‡ØÜ‡Æ≤‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç!"
    }
  };

  const handleVoiceToggle = () => {
    setIsListening(!isListening);
    if (!isListening) {
      toast({
        title: "Listening...",
        description: "Speak your query in your preferred language",
      });
      // Simulate voice recognition
      setTimeout(() => {
        setIsListening(false);
        setCurrentQuery(suggestions[selectedLanguage as keyof typeof suggestions][0]);
        handleQuery(suggestions[selectedLanguage as keyof typeof suggestions][0], true);
      }, 3000);
    }
  };

  const handleQuery = (query: string, isVoice = false) => {
    setCurrentQuery(query);
    const lang = selectedLanguage as keyof typeof mockResponses;
    let responseKey = "spending";
    
    if (query.toLowerCase().includes("return") || query.includes("‡§µ‡§æ‡§™‡§∏‡•Ä") || query.includes("‡§™‡§∞‡§§") || query.includes("‡Æ§‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™")) {
      responseKey = "returns";
    } else if (query.toLowerCase().includes("impulse") || query.includes("impulse")) {
      responseKey = "impulse";
    } else if (query.toLowerCase().includes("average") || query.includes("‡§î‡§∏‡§§") || query.includes("‡§∏‡§∞‡§æ‡§∏‡§∞‡•Ä") || query.includes("‡Æö‡Æ∞‡Ææ‡Æö‡Æ∞‡Æø")) {
      responseKey = "average";
    }
    
    if (!isVoice) {
      // Add user message to chat
      const userMessage: Message = {
        id: Date.now().toString(),
        content: query,
        role: 'user',
        timestamp: new Date(),
        language: selectedLanguage
      };
      setMessages(prev => [...prev, userMessage]);
    }
    
    setTimeout(() => {
      const responseContent = mockResponses[lang][responseKey as keyof typeof mockResponses[typeof lang]];
      setResponse(responseContent);
      
      if (!isVoice) {
        // Add assistant response to chat
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: responseContent,
          role: 'assistant',
          timestamp: new Date(),
          language: selectedLanguage
        };
        setMessages(prev => [...prev, assistantMessage]);
        setChatInput("");
      }
    }, 1000);
  };

  const handleChatSend = () => {
    if (!chatInput.trim()) return;
    handleQuery(chatInput, false);
  };

  const handleSuggestionClick = (suggestion: string) => {
    handleQuery(suggestion, true);
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-card/50 backdrop-blur-sm p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="h-10 w-10 rounded-full bg-gradient-to-r from-primary to-finance flex items-center justify-center">
              <Headphones className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-xl font-bold">üéôÔ∏è AI Voice Assistant</h1>
              <p className="text-sm text-muted-foreground">Voice & chat support in multiple languages</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="success" className="flex items-center gap-1">
              <Languages className="h-3 w-3" />
              Multi-language
            </Badge>
          </div>
        </div>
      </header>

      <div className="p-6">
        <Tabs defaultValue="voice" className="max-w-6xl mx-auto">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="voice" className="flex items-center gap-2">
              <Mic className="h-4 w-4" />
              Voice Mode
            </TabsTrigger>
            <TabsTrigger value="chat" className="flex items-center gap-2">
              <MessageCircle className="h-4 w-4" />
              Chat Mode
            </TabsTrigger>
          </TabsList>

          <TabsContent value="voice" className="space-y-6">
            <div className="grid lg:grid-cols-3 gap-8">
              {/* Voice Interface */}
              <div className="lg:col-span-2 space-y-6">
                {/* Language Selector */}
                <Card>
                  <CardHeader>
                    <CardTitle>Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {languages.map(lang => (
                          <SelectItem key={lang.value} value={lang.value}>
                            <span className="flex items-center gap-2">
                              <span>{lang.flag}</span>
                              <span>{lang.label}</span>
                            </span>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </CardContent>
                </Card>

                {/* Voice Input */}
                <Card>
                  <CardHeader>
                    <CardTitle>Voice Input</CardTitle>
                  </CardHeader>
                  <CardContent className="text-center">
                    <div className="mb-6">
                      <Button
                        variant={isListening ? "destructive" : "gradient"}
                        size="lg"
                        className="h-24 w-24 rounded-full"
                        onClick={handleVoiceToggle}
                      >
                        {isListening ? (
                          <MicOff className="h-8 w-8" />
                        ) : (
                          <Mic className="h-8 w-8" />
                        )}
                      </Button>
                    </div>
                    
                    <p className="text-sm text-muted-foreground mb-4">
                      {isListening ? "Listening... Speak now" : "Click to start voice input"}
                    </p>

                    {currentQuery && (
                      <div className="p-4 bg-muted/30 rounded-lg mb-4">
                        <div className="flex items-center gap-2 mb-2">
                          <MessageCircle className="h-4 w-4 text-primary" />
                          <span className="font-medium text-sm">Your Query:</span>
                        </div>
                        <p className="text-sm">{currentQuery}</p>
                      </div>
                    )}

                    {response && (
                      <div className="p-4 bg-primary/10 border border-primary/20 rounded-lg">
                        <div className="flex items-center gap-2 mb-2">
                          <Volume2 className="h-4 w-4 text-primary" />
                          <span className="font-medium text-sm text-primary">AI Response:</span>
                        </div>
                        <p className="text-sm">{response}</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>

              {/* Quick Stats Sidebar */}
              <div className="space-y-6">
                {/* Quick Suggestions */}
                <Card>
                  <CardHeader>
                    <CardTitle>üí° Quick Questions</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {suggestions[selectedLanguage as keyof typeof suggestions].map((suggestion, index) => (
                        <Button
                          key={index}
                          variant="ghost"
                          className="w-full text-left h-auto p-3 justify-start"
                          onClick={() => handleSuggestionClick(suggestion)}
                        >
                          <span className="text-sm leading-relaxed">{suggestion}</span>
                        </Button>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Quick Stats */}
                <Card>
                  <CardHeader>
                    <CardTitle>üìä Quick Stats</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <BarChart3 className="h-4 w-4 text-primary" />
                        <span className="text-sm">This Week</span>
                      </div>
                      <Badge variant="secondary">‚Çπ5,612</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <TrendingUp className="h-4 w-4 text-success" />
                        <span className="text-sm">Monthly Avg</span>
                      </div>
                      <Badge variant="secondary">‚Çπ18,500</Badge>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4 text-warning" />
                        <span className="text-sm">Return Items</span>
                      </div>
                      <Badge variant="warning">2 pending</Badge>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="chat" className="space-y-6">
            {/* Chat Interface */}
            <div className="grid lg:grid-cols-4 gap-6">
              <div className="lg:col-span-3">
                <Card className="h-[600px] flex flex-col">
                  <CardHeader className="border-b">
                    <CardTitle className="flex items-center gap-2">
                      <Bot className="h-5 w-5 text-primary" />
                      Chat Assistant
                    </CardTitle>
                  </CardHeader>
                  
                  {/* Messages */}
                  <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
                    <div className="space-y-4">
                      {messages.map((message) => (
                        <div
                          key={message.id}
                          className={`flex items-start gap-3 ${
                            message.role === 'user' ? 'justify-end' : 'justify-start'
                          }`}
                        >
                          {message.role === 'assistant' && (
                            <Avatar className="h-8 w-8">
                              <AvatarFallback className="bg-primary text-white">
                                <Bot className="h-4 w-4" />
                              </AvatarFallback>
                            </Avatar>
                          )}
                          
                          <div
                            className={`max-w-[80%] rounded-lg p-3 ${
                              message.role === 'user'
                                ? 'bg-primary text-primary-foreground'
                                : 'bg-muted'
                            }`}
                          >
                            <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                            <div className="flex items-center gap-2 mt-1">
                              <p className="text-xs opacity-70">
                                {message.timestamp.toLocaleTimeString()}
                              </p>
                              <Badge variant="outline" className="text-xs">
                                {message.language}
                              </Badge>
                            </div>
                          </div>

                          {message.role === 'user' && (
                            <Avatar className="h-8 w-8">
                              <AvatarFallback className="bg-finance text-white">
                                <User className="h-4 w-4" />
                              </AvatarFallback>
                            </Avatar>
                          )}
                        </div>
                      ))}
                    </div>
                  </ScrollArea>

                  {/* Chat Input */}
                  <div className="border-t p-4">
                    <div className="flex gap-2">
                      <Input
                        value={chatInput}
                        onChange={(e) => setChatInput(e.target.value)}
                        placeholder={`Type your message in ${languages.find(l => l.value === selectedLanguage)?.label}...`}
                        onKeyPress={(e) => e.key === 'Enter' && handleChatSend()}
                        className="flex-1"
                      />
                      <Button 
                        onClick={handleChatSend}
                        disabled={!chatInput.trim()}
                        size="icon"
                      >
                        <Send className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </Card>
              </div>

              {/* Chat Suggestions */}
              <div className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Language Settings</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {languages.map(lang => (
                          <SelectItem key={lang.value} value={lang.value}>
                            <span className="flex items-center gap-2">
                              <span>{lang.flag}</span>
                              <span className="text-xs">{lang.label}</span>
                            </span>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-sm">Quick Chat Options</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-2">
                    {suggestions[selectedLanguage as keyof typeof suggestions].slice(0, 3).map((suggestion, index) => (
                      <Button
                        key={index}
                        variant="outline"
                        size="sm"
                        className="w-full text-left h-auto p-2 justify-start text-xs"
                        onClick={() => {
                          setChatInput(suggestion);
                          handleChatSend();
                        }}
                      >
                        {suggestion}
                      </Button>
                    ))}
                  </CardContent>
                </Card>

                <Card className="bg-finance/10 border-finance/20">
                  <CardContent className="pt-6">
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Languages className="h-4 w-4 text-finance" />
                        <span className="font-medium text-sm">Multi-language Support</span>
                      </div>
                      <ul className="text-xs text-muted-foreground space-y-1">
                        <li>‚Ä¢ Real-time translation</li>
                        <li>‚Ä¢ Voice recognition</li>
                        <li>‚Ä¢ Cultural context aware</li>
                        <li>‚Ä¢ Local financial terms</li>
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default VoiceAssistant;